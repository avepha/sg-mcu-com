{"version":3,"sources":["config.js","components/SelectPortInput.js","helpers/isJson.js","components/SerialInput.js","components/SerialOutput.js","App.js","serviceWorker.js","index.js"],"names":["host","window","location","hostname","baudRates","SelectPortInput","onStatusChange","useState","ports","setPorts","connected","setConnected","port","setPort","baudRate","setBaudRate","useForm","register","getValues","useEffect","axios","get","config","then","data","status","_port","_baudRate","catch","e","console","log","useMemo","Form","className","FormGroup","row","Label","sm","Col","Input","type","name","value","innerRef","required","key","map","Button","color","onClick","a","async","post","response","alert","JSON","stringify","isJson","str","parse","SerialInput","connection","watch","setValue","undefined","error","setError","onFormat","onSubmit","preventDefault","style","disabled","height","onKeyDown","shiftKey","metaKey","socket","socketio","SerialOutput","text","setText","autoClear","setAutoClear","res","topic","setResponse","on","useSocketIOTopic","lineHeight","check","checked","onChange","target","App","isPortOpen","setIsPortOpen","Row","xs","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2cf85cee.chunk.js","sourcesContent":["export default {\n  host: window.location.hostname,\n}\n","import axios from 'axios'\nimport React, {useEffect, useMemo, useState} from 'react'\nimport useForm from 'react-hook-form'\nimport {Button, Col, Form, FormGroup, Input, Label} from 'reactstrap'\nimport config from '../config'\nconst baudRates = [\n  9600,\n  19200,\n  56700,\n  115200,\n  345600,\n]\n\nconst SelectPortInput = ({onStatusChange = () => true}) => {\n  const [ports, setPorts] = useState([])\n  const [connected, setConnected] = useState(false)\n  const [port, setPort] = useState()\n  const [baudRate, setBaudRate] = useState()\n  const {register, getValues} = useForm()\n  useEffect(() => {\n    axios.get(`http://${config.host}:4002/list`).then(({data}) => setPorts(data))\n    axios.get(`http://${config.host}:4002/info`).then(({data}) => {\n      if (data.status === 'connected') {\n        const {port: _port, baudRate: _baudRate} = data.data\n        setPort(_port)\n        setBaudRate(_baudRate)\n        setConnected(true)\n      }\n      else setConnected(false)\n    }).catch(e => console.log({e}))\n  }, [])\n\n  useMemo(() => {\n    onStatusChange(connected)\n  }, [connected, onStatusChange])\n\n  return <Form className=\"mt-2\">\n    <FormGroup row>\n      <Label sm={1}>Select Port</Label>\n      <Col sm={7}>\n        <Input type=\"select\" name=\"port\" value={port} innerRef={register({required: true})}>\n          <option value={'/dev/ROBOT'} key={'robot'}>/dev/ROBOT</option>\n          {\n            ports.map(port => <option value={port} key={port}>{port}</option>)\n          }\n        </Input>\n      </Col>\n      <Col sm={2}>\n        <Input type=\"select\" name=\"baudRate\" value={baudRate} innerRef={register({required: true})}>\n          {baudRates.map(baudRate => <option key={baudRate} value={baudRate}>{baudRate}</option>)}\n        </Input>\n      </Col>\n      <Col sm={2}>\n\n        {!connected && <Button type=\"button\" color=\"success\" className=\"form-control\" onClick={async () => {\n          try {\n            const {port, baudRate} = getValues()\n            await axios.post(`http://${config.host}:4002/connect`, {port, baudRate})\n            setConnected(true)\n          } catch ({response}) {\n            console.log(response)\n            alert(JSON.stringify(response.data))\n          }\n        }}>Connect</Button>}\n\n        {\n          connected && <Button type=\"button\" color=\"danger\" className=\"form-control\" onClick={async () => {\n            try {\n              await axios.post(`http://${config.host}:4002/disconnect`)\n              setConnected(false)\n            } catch ({response}) {\n              console.log(response)\n              alert(JSON.stringify(response.data))\n            }\n          }}>Disconnected</Button>\n        }\n      </Col>\n    </FormGroup>\n  </Form>\n}\n\nexport default SelectPortInput\n","export default function isJson(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n","import React, {useState} from 'react'\nimport {Button, Form, FormGroup, Input, Label} from 'reactstrap'\nimport useForm from 'react-hook-form'\nimport isJson from '../helpers/isJson'\nimport axios from 'axios'\nimport config from '../config'\n\nconst SerialInput = ({connection}) => {\n  const {register, watch, setValue} = useForm()\n  const [error, setError] = useState(undefined)\n  const onFormat = () => {\n    setError(undefined)\n    const str = watch('jsonText')\n    if (isJson(str)) {\n      setValue('jsonText', JSON.stringify(JSON.parse(str), null, 2))\n    } else {\n      setError('Json format is invalid')\n    }\n  }\n\n  const onSubmit = async (e) => {\n    if (e) {\n      e.preventDefault()\n    }\n\n    if (!isJson(watch('jsonText'))) {\n      alert('JsonText is invalid')\n      return\n    }\n\n    try {\n      await axios.post(`http://${config.host}:4002/commit`, {\n        data: JSON.parse(watch('jsonText'))\n      })\n    } catch ({response}) {\n      alert(JSON.stringify(response))\n    }\n  }\n\n  const onKeyDown = ({key, shiftKey, metaKey}) => {\n    if (metaKey && shiftKey && (key === 'l' || key === 'L')) {\n      onFormat()\n    }\n    if (metaKey && key === 'Enter') {\n      onSubmit()\n    }\n  }\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <FormGroup>\n        <Label>\n          Input\n          <span style={{color: 'red'}}> {error}</span>\n        </Label>\n        <Input type=\"textarea\" name=\"jsonText\" disabled={!connection} style={{height: '85vh'}} innerRef={register({required: true})} onKeyDown={onKeyDown}/>\n      </FormGroup>\n      {connection && <div className=\"w-100 text-right\">\n        <Button type=\"button\" color=\"primary\" className=\"m-1\" onClick={onFormat}>Format</Button>\n        {isJson(watch('jsonText')) &&\n        <Button type=\"submit\" color=\"success\" className=\"m-1\">Commit</Button>\n        }\n      </div>}\n    </Form>\n  )\n}\nexport default SerialInput\n","import React, {Fragment, useEffect, useMemo, useState} from 'react'\nimport {Button, FormGroup, Input, Label} from 'reactstrap'\nimport config from '../config'\nimport socketio from 'socket.io-client'\n\nconst socket = socketio(`http://${config.host}:4002`)\n\nconst useSocketIOTopic = (topic) => {\n  const [response, setResponse] = useState(undefined)\n\n  useEffect(() => {\n    socket.on(topic, (data) => {\n      setResponse(data)\n    })\n  }, [topic])\n\n  return response\n}\n\nconst SerialOutput = ({connection}) => {\n  const [text, setText] = useState(``)\n  const [autoClear, setAutoClear] = useState(true)\n  const res = useSocketIOTopic('listening')\n\n  useMemo(() => {\n    if (res) {\n      const {type, data} = res\n      if (type === 'json') {\n        if (autoClear) {\n          return setText(`${JSON.stringify(data, null, 2)}\\r\\n`)\n        }\n\n        setText(`${text}${JSON.stringify(data, null, 2)}\\r\\n`)\n      } else {\n        if (autoClear) {\n          return setText(`${data}\\r\\n`)\n        }\n        setText(`${text}${data}\\r\\n`)\n      }\n    }\n    // eslint-disable-next-line\n  }, [res, autoClear])\n\n  return (\n    <Fragment>\n\n      <FormGroup>\n        <Label>\n          Output\n        </Label>\n        <Input type=\"textarea\" disabled={!connection} value={text} style={{height: '85vh', lineHeight: 1.2}} onKeyDown={({key, metaKey}) => {\n          if (metaKey && key === 'k') {\n            setText(``)\n          }\n        }}/>\n      </FormGroup>\n      <div className=\"w-100 text-right\">\n        <Label check>\n          <Input type=\"checkbox\" checked={autoClear} onChange={({target}) => setAutoClear(target.checked)}/>{' '}\n          Auto-Clear\n        </Label>\n        <Button type=\"button\" color=\"primary\" className=\"ml-3\" onClick={() => setText(``)}>Clear</Button>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default SerialOutput\n","import React, {Fragment, useState} from 'react'\nimport {Col, Row} from 'reactstrap'\nimport SelectPortInput from './components/SelectPortInput'\nimport SerialInput from './components/SerialInput'\nimport SerialOutput from './components/SerialOutput'\n\nfunction App() {\n  const [isPortOpen, setIsPortOpen] = useState(false)\n\n  return (\n    <Fragment>\n      <div className=\"ml-3 mr-3\">\n        <SelectPortInput onStatusChange={(status) => setIsPortOpen(status)}/>\n        <Row>\n          <Col xs=\"6\">\n            <SerialInput connection={isPortOpen}/>\n          </Col>\n          <Col xs=\"6\">\n            <SerialOutput connection={isPortOpen}/>\n          </Col>\n        </Row>\n      </div>\n\n    </Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}