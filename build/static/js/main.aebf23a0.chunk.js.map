{"version":3,"sources":["config.js","helpers/shortkeyHandler.js","components/SelectPortInput.js","helpers/isJson.js","redux/actionTypes.js","redux/actions/input.js","redux/actions/preset.js","components/SerialInput.js","redux/actions/recent.js","components/SerialOutput.js","components/AddPresetModal.js","components/EditPresetModal.js","components/PresetInput.js","components/RecentInput.js","App.js","serviceWorker.js","redux/reducers/recent.js","redux/reducers/input.js","redux/reducers/preset.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["host","window","location","hostname","shortkeyHandler","this","events","document","body","addEventListener","_key","key","_metaKey","metaKey","_shiftKey","shiftKey","Object","keys","forEach","topic","condition","callback","call","name","baudRates","SelectPortInput","onStatusChange","useState","ports","setPorts","connected","setConnected","port","setPort","baudRate","setBaudRate","useForm","register","getValues","onConnect","a","async","axios","post","config","response","alert","JSON","stringify","data","onDisconnect","useEffect","get","then","status","_port","_baudRate","catch","e","console","log","addEvent","useMemo","Form","className","FormGroup","row","Label","sm","Col","Input","type","value","innerRef","required","map","Button","color","onClick","isJson","str","result","parse","prototype","toString","err","setSerialInputText","payload","inputText","fetchPreset","dispatch","id","header","results","sortBy","connect","serialInputText","input","addRecent","connection","watch","setValue","undefined","error","setError","onFormat","onSubmit","preventDefault","style","disabled","height","socket","socketio","SerialOutput","text","setText","autoClear","setAutoClear","res","setResponse","on","useSocketIOTopic","lineHeight","check","checked","onChange","target","addPreset","open","close","triggerValidation","errors","Modal","isOpen","toggle","size","ModalHeader","ModalBody","title","presetData","validate","v","presetText","ModalFooter","presets","preset","deletePreset","Table","responsive","scope","slice","width","modal","setModal","editModal","setEditModal","xs","index","recentList","recent","delRecentAll","App","isPortOpen","setIsPortOpen","Row","bottom","left","pkg","version","Boolean","match","initialState","localStorage","getItem","initState","combineReducers","state","action","newRecentList","setItem","removeItem","applyMiddleware","reduxThunk","createStore","rootReducer","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aebf23a0.chunk.js","sourcesContent":["export default {\n  host: window.location.hostname,\n}\n","class ShortkeyHandler {\n  constructor() {\n    this.events = {}\n    document.body.addEventListener('keydown', ({key: _key, metaKey: _metaKey, shiftKey: _shiftKey}) => {\n      Object.keys(this.events).forEach(topic => {\n        const {metaKey, shiftKey, key} = this.events[topic].condition\n        if (metaKey === _metaKey && shiftKey === _shiftKey && key === _key) {\n          this.events[topic].callback.call()\n        }\n      })\n    })\n  }\n\n  addEvent(name, {metaKey, shiftKey, key}, callback) {\n    if (!this.events[name]) {\n      this.events[name] = {condition: {metaKey, shiftKey, key}, callback}\n    }\n  }\n}\n\nconst shortkeyHandler = new ShortkeyHandler()\nexport default shortkeyHandler\n","import axios from 'axios'\nimport React, {useEffect, useMemo, useState} from 'react'\nimport useForm from 'react-hook-form'\nimport {Button, Col, Form, FormGroup, Input, Label} from 'reactstrap'\nimport config from '../config'\nimport shortkeyHandler from '../helpers/shortkeyHandler'\nconst baudRates = [\n  345600,\n  115200,\n  56700,\n  19200,\n  9600,\n]\n\nconst SelectPortInput = ({onStatusChange = () => true}) => {\n  const [ports, setPorts] = useState([])\n  const [connected, setConnected] = useState(false)\n  const [port, setPort] = useState()\n  const [baudRate, setBaudRate] = useState()\n  const {register, getValues} = useForm()\n\n  const onConnect = async () => {\n    try {\n      const {port, baudRate} = getValues()\n      await axios.post(`http://${config.host}:4002/connect`, {port, baudRate})\n      setConnected(true)\n    } catch ({response}) {\n      alert(JSON.stringify(response.data))\n    }\n  }\n\n  const onDisconnect = async () => {\n    try {\n      await axios.post(`http://${config.host}:4002/disconnect`)\n      setConnected(false)\n    } catch ({response}) {\n      alert(JSON.stringify(response.data))\n    }\n  }\n\n  useEffect(() => {\n    axios.get(`http://${config.host}:4002/list`).then(({data}) => setPorts(data))\n    axios.get(`http://${config.host}:4002/info`).then(({data}) => {\n      if (data.status === 'connected') {\n        const {port: _port, baudRate: _baudRate} = data.data\n        setPort(_port)\n        setBaudRate(_baudRate)\n        setConnected(true)\n      } else setConnected(false)\n    }).catch(e => console.log({e}))\n\n    shortkeyHandler.addEvent('connect', {metaKey: true, shiftKey: true, key: 's'}, () => onConnect())\n    shortkeyHandler.addEvent('disconnect', {metaKey: true, shiftKey: true, key: 'x'}, () => onDisconnect())\n    // eslint-disable-next-line\n  }, [])\n\n\n  useMemo(() => {\n    onStatusChange(connected)\n  }, [connected, onStatusChange])\n\n  return <Form className=\"mt-2\">\n    <FormGroup row>\n      <Label sm={1}>Port</Label>\n      <Col sm={7}>\n        <Input type=\"select\" name=\"port\" value={port} innerRef={register({required: true})}>\n          <option value={'/dev/ROBOT'} key={'robot'}>/dev/ROBOT</option>\n          {\n            ports.map(port => <option value={port} key={port}>{port}</option>)\n          }\n        </Input>\n      </Col>\n      <Col sm={2}>\n        <Input type=\"select\" name=\"baudRate\" value={baudRate} innerRef={register({required: true})}>\n          {baudRates.map(baudRate => <option key={baudRate} value={baudRate}>{baudRate}</option>)}\n        </Input>\n      </Col>\n      <Col sm={2}>\n        {!connected && <Button type=\"button\" color=\"success\" className=\"form-control\" onClick={onConnect}>Connect</Button>}\n        {connected && <Button type=\"button\" color=\"danger\" className=\"form-control\" onClick={onDisconnect}>Disconnected</Button>}\n      </Col>\n    </FormGroup>\n  </Form>\n}\n\nexport default SelectPortInput\n","export default function isJson(str) {\n  if (typeof str !== 'string') return false;\n  try {\n    const result = JSON.parse(str);\n    const type = Object.prototype.toString.call(result);\n    return type === '[object Object]'\n      || type === '[object Array]';\n  } catch (err) {\n    return false;\n  }\n}\n","export const ADD_RECENT = 'ADD_RECENT'\nexport const DELETE_RECENT = 'DELETE_RECENT'\n\nexport const SET_SERIAL_INPUT_TEXT = 'SET_SERIAL_INPUT_TEXT'\n\nexport const ADD_PRESET = 'ADD_PRESET'\nexport const DELETE_PRESET = 'DELETE_PRESET'\nexport const EDIT_PRESET = 'EDIT_PRESET'\nexport const SET_PRESET = 'FETCH_PRESET'\n","import {SET_SERIAL_INPUT_TEXT} from '../actionTypes'\n\nexport const setSerialInputText = ({inputText}) => ({\n  type: SET_SERIAL_INPUT_TEXT,\n  payload: {\n    inputText\n  }\n})\n","import {sortBy} from 'lodash'\nimport {DELETE_PRESET, SET_PRESET} from '../actionTypes'\nimport axios from 'axios'\nimport config from '../../config'\n\nexport const addPreset = ({header, data}) => (dispatch) => {\n  axios.post(`http://${config.host}:4002/saves`, {header, data})\n    .catch(() => [])\n    .then(() => dispatch(fetchPreset()))\n\n  dispatch(fetchPreset())\n}\n\nexport const deletePreset = (id) => async (dispatch) => {\n  await axios.post(`http://${config.host}:4002/saves/deletes`, {id})\n    .catch(() => [])\n\n  dispatch(fetchPreset())\n  dispatch({\n    type: DELETE_PRESET,\n    payload: {}\n  })\n}\n\nexport const fetchPreset = () => async (dispatch) => {\n  const results = await axios.get(`http://${config.host}:4002/saves`)\n    .catch(() => [])\n    .then(({data}) => data.map(({id, header, data}) => ({id, header, data})))\n\n  dispatch({\n    type: SET_PRESET,\n    payload: sortBy(results, 'header'),\n  })\n}\n","import React, {useEffect, useState} from 'react'\nimport {connect} from 'react-redux'\nimport {Button, Form, FormGroup, Input, Label} from 'reactstrap'\nimport useForm from 'react-hook-form'\nimport isJson from '../helpers/isJson'\nimport axios from 'axios'\nimport config from '../config'\nimport shortkeyHandler from '../helpers/shortkeyHandler'\n\nimport {addRecent} from '../redux/actions'\n\nconst SerialInput = ({connection, addRecent, serialInputText}) => {\n  const {register, watch, setValue} = useForm()\n  const [error, setError] = useState(undefined)\n\n  useEffect(() => {\n    setValue('jsonText', JSON.stringify(serialInputText, null, 2))\n    // eslint-disable-next-line\n  }, [serialInputText])\n\n  const onFormat = () => {\n    setError(undefined)\n    const str = watch('jsonText')\n    if (isJson(str)) {\n      setValue('jsonText', JSON.stringify(JSON.parse(str), null, 2))\n    } else {\n      setError('Json format is invalid')\n    }\n  }\n\n  const onSubmit = async (e) => {\n    if (e) {\n      e.preventDefault()\n    }\n\n    if (!isJson(watch('jsonText'))) {\n      alert('JsonText is invalid')\n      return\n    }\n\n    try {\n      await axios.post(`http://${config.host}:4002/commit`, {\n        data: JSON.parse(watch('jsonText'))\n      })\n\n      const data = JSON.stringify(JSON.parse(watch('jsonText')))\n      addRecent({data})\n\n    } catch ({response}) {\n      alert(JSON.stringify(response))\n    }\n  }\n\n  shortkeyHandler.addEvent('commit', {metaKey: true, shiftKey: true, key: 'Enter'}, () => onSubmit())\n  shortkeyHandler.addEvent('format', {metaKey: true, shiftKey: true, key: 'l'}, () => onFormat())\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <FormGroup>\n        <Label>\n          Input\n          <span style={{color: 'red'}}> {error}</span>\n        </Label>\n        <Input type=\"textarea\" name=\"jsonText\" disabled={!connection} style={{height: '85vh'}} innerRef={register({required: true})}/>\n      </FormGroup>\n      {connection && <div className=\"w-100 text-right\">\n        <Button type=\"button\" color=\"primary\" className=\"m-1\" onClick={onFormat}>Format</Button>\n        {isJson(watch('jsonText')) &&\n        <Button type=\"submit\" color=\"success\" className=\"m-1\">Commit</Button>\n        }\n      </div>}\n    </Form>\n  )\n}\n\n\nconst mapStateToProps = ({input}) => {\n  const {serialInputText} = input\n  return {\n    serialInputText\n  }\n}\nexport default connect(mapStateToProps, {addRecent})(SerialInput)\n","import {ADD_RECENT, DELETE_RECENT} from '../actionTypes'\n\nexport const addRecent = ({data}) => ({\n  type: ADD_RECENT,\n  payload: {data}\n})\n\nexport const delRecentAll = () => ({\n  type: DELETE_RECENT,\n  payload: {}\n})\n","import React, {Fragment, useEffect, useMemo, useState} from 'react'\nimport {Button, FormGroup, Input, Label} from 'reactstrap'\nimport config from '../config'\nimport socketio from 'socket.io-client'\nimport shortkeyHandler from '../helpers/shortkeyHandler'\n\nconst socket = socketio(`http://${config.host}:4002`)\n\nconst useSocketIOTopic = (topic) => {\n  const [response, setResponse] = useState(undefined)\n\n  useEffect(() => {\n    socket.on(topic, (data) => {\n      setResponse(data)\n    })\n  }, [topic])\n\n  return response\n}\n\nconst SerialOutput = ({connection}) => {\n  const [text, setText] = useState(``)\n  const [autoClear, setAutoClear] = useState(false)\n  const res = useSocketIOTopic('listening')\n  useEffect(() => {\n    shortkeyHandler.addEvent('clearText', {metaKey: true, shiftKey: true, key: 'k'}, () => setText(``))\n  }, [])\n  useMemo(() => {\n    if (res) {\n      const {type, data} = res\n      if (type === 'json') {\n        if (autoClear) {\n          return setText(`${JSON.stringify(data, null, 2)}\\r\\n`)\n        }\n\n        setText(`${text}${JSON.stringify(data, null, 2)}\\r\\n`)\n      } else {\n        if (autoClear) {\n          return setText(`${data}\\r\\n`)\n        }\n        setText(`${text}${data}\\r\\n`)\n      }\n    }\n    // eslint-disable-next-line\n  }, [res, autoClear])\n\n  return (\n    <Fragment>\n\n      <FormGroup>\n        <Label>\n          Output\n        </Label>\n        <Input type=\"textarea\" disabled={!connection} value={text} style={{height: '85vh', lineHeight: 1.2}}/>\n      </FormGroup>\n      <div className=\"w-100 text-right\">\n        <Label check>\n          <Input type=\"checkbox\" checked={autoClear} onChange={({target}) => setAutoClear(target.checked)}/>{' '}\n          Auto-Clear\n        </Label>\n        <Button type=\"button\" color=\"primary\" className=\"ml-3\" onClick={() => setText(``)}>Clear</Button>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default SerialOutput\n","import React from 'react'\nimport useForm from 'react-hook-form'\nimport {connect} from 'react-redux'\nimport {addPreset} from '../redux/actions'\nimport {Button, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader} from 'reactstrap'\nimport isJson from '../helpers/isJson'\n\nconst AddPresetModal = ({open = false, close = () => null, addPreset}) => {\n  const {register, getValues, triggerValidation, errors, watch, setValue} = useForm()\n  return (\n    <Modal isOpen={open} toggle={close} size=\"lg\">\n      <ModalHeader toggle={close}>\n        Add Preset\n      </ModalHeader>\n      <ModalBody>\n        <Label><strong>Title</strong> {errors.title && <p style={{color: 'red'}}>title is required.</p>}</Label>\n        <Input name=\"title\" type=\"text\" size=\"lg\" innerRef={register({required: true})}/>\n\n        <Label><strong>Preset data</strong>\n          {errors.presetData && errors.presetData.type === 'required' && <p style={{color: 'red'}}>preset is required.</p>}\n          {errors.presetData && errors.presetData.type === 'validate' && <p style={{color: 'red'}}>preset must be json format.</p>}\n        </Label>\n        <Input name=\"presetData\" type=\"textarea\" size=\"lg\" style={{height: '40vh'}} innerRef={register({\n          required: true,\n          validate: v => isJson(v)\n        })}/>\n\n        <div className=\"w-100 text-right m-2\">\n          {isJson(watch('presetData')) && <Button type=\"button\" color=\"primary\" size=\"lg\" onClick={() => {\n            const presetText = watch('presetData')\n            setValue('presetData', JSON.stringify(JSON.parse(presetText), null, 2))\n          }}>Format</Button>}\n        </div>\n      </ModalBody>\n      <ModalFooter>\n        <div className=\"w-100 text-right\">\n          <Button type=\"button\" color=\"danger\" size=\"lg\" onClick={close}>Discard</Button>\n          <Button className=\"ml-2\" type=\"button\" color=\"success\" size=\"lg\" onClick={async () => {\n            const isValid = await triggerValidation()\n            if (!isValid) {\n              return null\n            }\n            const {title, presetData} = getValues()\n            addPreset({header: title, data: JSON.parse(presetData)})\n            close()\n          }}>Add Preset</Button>\n        </div>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default connect(null, {addPreset})(AddPresetModal)\n","import React, {useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport {fetchPreset, deletePreset} from '../redux/actions'\nimport {Button, Modal, ModalBody, ModalHeader, Table} from 'reactstrap'\n\nconst EditPresetModal = ({open = false, close = () => null, presets, fetchPreset, deletePreset}) => {\n  useEffect(() => {\n    fetchPreset()\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <Modal isOpen={open} toggle={close} size=\"lg\">\n      <ModalHeader toggle={close}>\n        Edit Preset\n      </ModalHeader>\n      <ModalBody>\n        <Table responsive>\n          <thead>\n          <tr>\n            <th>ID</th>\n            <th>Title</th>\n            <th>Data</th>\n            <th>OP</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            presets.map(({id, header, data}) => (\n              <tr key={id}>\n                <th scope=\"row\">{id}</th>\n                <td>{header}</td>\n                <td>{JSON.stringify(data).slice(0, 50)}</td>\n                <td>\n                  <Button type=\"button\" color=\"danger\" size=\"sm\" style={{width: 60}} onClick={() => deletePreset(id)}>Delete</Button>\n                  <Button type=\"button\" color=\"primary\" size=\"sm\" style={{width: 60}} className=\"ml-1\">Edit</Button>\n                </td>\n              </tr>\n            ))\n          }\n          </tbody>\n        </Table>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default connect(({preset}) => ({\n  presets: preset.presets\n}), {fetchPreset, deletePreset})(EditPresetModal)\n","import React, {useEffect, useState} from 'react'\nimport {connect} from 'react-redux'\nimport {setSerialInputText} from '../redux/actions'\nimport {Button, Col, FormGroup, Input, Label} from 'reactstrap'\n\nimport {fetchPreset} from '../redux/actions'\n\nimport AddPresetModal from './AddPresetModal'\nimport EditPresetModal from './EditPresetModal'\n\nconst PresetInput = ({setSerialInputText, presets, fetchPreset}) => {\n  const [modal, setModal] = useState(false)\n  const [editModal, setEditModal] = useState(false)\n  useEffect(() => {\n    fetchPreset()\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <FormGroup row>\n      <AddPresetModal close={() => setModal(false)} open={modal} />\n      <EditPresetModal close={() => setEditModal(false)} open={editModal} />\n      <Label xs={1}>Preset: </Label>\n      <Col xs={7}>\n        <Input type=\"select\" onChange={({target}) => target.value !== -1 && setSerialInputText({inputText: presets[target.value].data})}>\n          {presets.map(({header, data}, index) => <option key={index} value={index}>{header}</option>)}\n        </Input>\n      </Col>\n      <Col xs={2}>\n        <Button type=\"button\" color=\"primary\" className=\"form-control\" onClick={() => setEditModal(true)}>Edit</Button>\n      </Col>\n      <Col xs={2}>\n        <Button type=\"button\" color=\"success\" className=\"form-control\" onClick={() => setModal(true)}>+ Add</Button>\n      </Col>\n    </FormGroup>\n  )\n}\n\nconst mapStateToProps = ({preset}) => {\n  const {presets} = preset\n  return {presets}\n}\nexport default connect(mapStateToProps, {setSerialInputText, fetchPreset})(PresetInput)\n","import React from 'react'\nimport {Button, Col, FormGroup, Input, Label} from 'reactstrap'\nimport {connect} from 'react-redux'\nimport {delRecentAll, setSerialInputText} from '../redux/actions'\nconst RecentInput = ({recentList, delRecentAll, setSerialInputText}) => {\n  return (\n    <FormGroup row>\n      <Label xs={1}>Recent: </Label>\n      <Col xs={7}>\n        <Input type=\"select\" onChange={({target}) => target.value !== -1 && setSerialInputText({inputText: JSON.parse(recentList[target.value])})}>\n          {recentList.map((recent, index) => <option key={index} value={index}>{recent.slice(0, 100)}</option>)}\n        </Input>\n      </Col>\n      <Col xs={2}>\n        <Button type=\"button\" color=\"danger\" className=\"form-control\" onClick={delRecentAll}>Clear</Button>\n      </Col>\n    </FormGroup>\n  )\n}\n\nconst mapStateToProps = ({recent}) => {\n  const {recentList} = recent\n  return {\n    recentList\n  }\n}\nexport default connect(mapStateToProps, {delRecentAll, setSerialInputText})(RecentInput)\n","import React, {Fragment, useState} from 'react'\nimport {Col, Row} from 'reactstrap'\nimport SelectPortInput from './components/SelectPortInput'\nimport SerialInput from './components/SerialInput'\nimport SerialOutput from './components/SerialOutput'\nimport PresetInput from './components/PresetInput'\nimport RecentInput from './components/RecentInput'\n\nimport './helpers/shortkeyHandler'\nimport pkg from '../package.json'\n\nfunction App() {\n  const [isPortOpen, setIsPortOpen] = useState(false)\n\n  return (\n    <Fragment>\n      <div className=\"ml-3 mr-3\">\n        <SelectPortInput onStatusChange={(status) => setIsPortOpen(status)}/>\n        <Row>\n          <Col xs=\"12\">\n            {isPortOpen && <PresetInput />}\n          </Col>\n        </Row>\n        <Row>\n          <Col xs=\"12\">\n            {isPortOpen && <RecentInput />}\n          </Col>\n        </Row>\n        <Row>\n          <Col xs=\"6\">\n            <SerialInput connection={isPortOpen}/>\n          </Col>\n          <Col xs=\"6\">\n            <SerialOutput connection={isPortOpen}/>\n          </Col>\n        </Row>\n      </div>\n      <span className=\"position-absolute\" style={{bottom: 5, left: 5}}>\n        version: {pkg.version}\n      </span>\n    </Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_RECENT, DELETE_RECENT } from \"../actionTypes\";\n\nconst initialState = {\n  recentList: JSON.parse(localStorage.getItem('recent')) || []\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case ADD_RECENT: {\n      const {data} = action.payload\n      const newRecentList = [...state.recentList, data]\n      localStorage.setItem('recent', JSON.stringify(newRecentList))\n      return {\n        ...state,\n        recentList: newRecentList\n      };\n    }\n    case DELETE_RECENT: {\n      localStorage.removeItem('recent')\n      return {\n        ...state,\n        recentList: []\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import {SET_SERIAL_INPUT_TEXT} from '../actionTypes'\n\nconst initState = {\n  serialInputText: 'test'\n}\n\nexport default function(state = initState, action) {\n  switch (action.type) {\n    case SET_SERIAL_INPUT_TEXT: {\n      const {inputText} = action.payload\n      return {...state, serialInputText: inputText}\n    }\n    default: {\n      return state\n    }\n  }\n}\n","import {ADD_PRESET, DELETE_PRESET, SET_PRESET} from '../actionTypes'\n\nconst initialState = {\n  presets: []\n}\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_PRESET: {\n      return {...state, presets: action.payload || []}\n    }\n    case ADD_PRESET: {\n      return {...state}\n    }\n    case DELETE_PRESET: {\n      return {...state}\n    }\n    default:\n      return state\n  }\n}\n","import {combineReducers} from 'redux'\nimport recent from './recent'\nimport input from './input'\nimport preset from './preset'\n\nexport default combineReducers({recent, input, preset})\n","import { createStore, applyMiddleware } from \"redux\";\nimport reduxThunk from 'redux-thunk'\nimport rootReducer from \"./reducers\";\n\nexport default applyMiddleware(reduxThunk)(createStore)(rootReducer);\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker'\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  , document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}