{"version":3,"sources":["config.js","helpers/shortkeyHandler.js","components/SelectPortInput.js","helpers/isJson.js","components/SerialInput.js","components/SerialOutput.js","components/PresetInput.js","App.js","serviceWorker.js","index.js"],"names":["host","window","location","hostname","shortkeyHandler","this","events","document","body","addEventListener","_key","key","_metaKey","metaKey","_shiftKey","shiftKey","Object","keys","forEach","topic","condition","callback","call","name","baudRates","SelectPortInput","onStatusChange","useState","ports","setPorts","connected","setConnected","port","setPort","baudRate","setBaudRate","useForm","register","getValues","onConnect","a","async","axios","post","config","response","alert","JSON","stringify","data","onDisconnect","useEffect","get","then","status","_port","_baudRate","catch","e","console","log","addEvent","useMemo","Form","className","FormGroup","row","Label","sm","Col","Input","type","value","innerRef","required","map","Button","color","onClick","isJson","str","result","parse","prototype","toString","err","SerialInput","connection","preset","watch","setValue","undefined","error","setError","onFormat","onSubmit","preventDefault","style","disabled","height","socket","socketio","SerialOutput","text","setText","autoClear","setAutoClear","res","setResponse","on","useSocketIOTopic","lineHeight","check","checked","onChange","target","PresetInput","onSelect","presets","setPreset","nPresets","header","length","xs","index","App","isPortOpen","setIsPortOpen","Row","bottom","left","pkg","version","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7741eb11.chunk.js","sourcesContent":["export default {\n  host: window.location.hostname,\n}\n","class ShortkeyHandler {\n  constructor() {\n    this.events = {}\n    document.body.addEventListener('keydown', ({key: _key, metaKey: _metaKey, shiftKey: _shiftKey}) => {\n      Object.keys(this.events).forEach(topic => {\n        const {metaKey, shiftKey, key} = this.events[topic].condition\n        if (metaKey === _metaKey && shiftKey === _shiftKey && key === _key) {\n          this.events[topic].callback.call()\n        }\n      })\n    })\n  }\n\n  addEvent(name, {metaKey, shiftKey, key}, callback) {\n    if (!this.events[name]) {\n      this.events[name] = {condition: {metaKey, shiftKey, key}, callback}\n    }\n  }\n}\n\nconst shortkeyHandler = new ShortkeyHandler()\nexport default shortkeyHandler\n","import axios from 'axios'\nimport React, {useEffect, useMemo, useState} from 'react'\nimport useForm from 'react-hook-form'\nimport {Button, Col, Form, FormGroup, Input, Label} from 'reactstrap'\nimport config from '../config'\nimport shortkeyHandler from '../helpers/shortkeyHandler'\nconst baudRates = [\n  345600,\n  115200,\n  56700,\n  19200,\n  9600,\n]\n\nconst SelectPortInput = ({onStatusChange = () => true}) => {\n  const [ports, setPorts] = useState([])\n  const [connected, setConnected] = useState(false)\n  const [port, setPort] = useState()\n  const [baudRate, setBaudRate] = useState()\n  const {register, getValues} = useForm()\n\n  const onConnect = async () => {\n    try {\n      const {port, baudRate} = getValues()\n      await axios.post(`http://${config.host}:4002/connect`, {port, baudRate})\n      setConnected(true)\n    } catch ({response}) {\n      alert(JSON.stringify(response.data))\n    }\n  }\n\n  const onDisconnect = async () => {\n    try {\n      await axios.post(`http://${config.host}:4002/disconnect`)\n      setConnected(false)\n    } catch ({response}) {\n      alert(JSON.stringify(response.data))\n    }\n  }\n\n  useEffect(() => {\n    axios.get(`http://${config.host}:4002/list`).then(({data}) => setPorts(data))\n    axios.get(`http://${config.host}:4002/info`).then(({data}) => {\n      if (data.status === 'connected') {\n        const {port: _port, baudRate: _baudRate} = data.data\n        setPort(_port)\n        setBaudRate(_baudRate)\n        setConnected(true)\n      } else setConnected(false)\n    }).catch(e => console.log({e}))\n\n    shortkeyHandler.addEvent('connect', {metaKey: true, shiftKey: true, key: 's'}, () => onConnect())\n    shortkeyHandler.addEvent('disconnect', {metaKey: true, shiftKey: true, key: 'x'}, () => onDisconnect())\n    // eslint-disable-next-line\n  }, [])\n\n\n  useMemo(() => {\n    onStatusChange(connected)\n  }, [connected, onStatusChange])\n\n  return <Form className=\"mt-2\">\n    <FormGroup row>\n      <Label sm={1}>Port</Label>\n      <Col sm={7}>\n        <Input type=\"select\" name=\"port\" value={port} innerRef={register({required: true})}>\n          <option value={'/dev/ROBOT'} key={'robot'}>/dev/ROBOT</option>\n          {\n            ports.map(port => <option value={port} key={port}>{port}</option>)\n          }\n        </Input>\n      </Col>\n      <Col sm={2}>\n        <Input type=\"select\" name=\"baudRate\" value={baudRate} innerRef={register({required: true})}>\n          {baudRates.map(baudRate => <option key={baudRate} value={baudRate}>{baudRate}</option>)}\n        </Input>\n      </Col>\n      <Col sm={2}>\n        {!connected && <Button type=\"button\" color=\"success\" className=\"form-control\" onClick={onConnect}>Connect</Button>}\n        {connected && <Button type=\"button\" color=\"danger\" className=\"form-control\" onClick={onDisconnect}>Disconnected</Button>}\n      </Col>\n    </FormGroup>\n  </Form>\n}\n\nexport default SelectPortInput\n","export default function isJson(str) {\n  if (typeof str !== 'string') return false;\n  try {\n    const result = JSON.parse(str);\n    const type = Object.prototype.toString.call(result);\n    return type === '[object Object]'\n      || type === '[object Array]';\n  } catch (err) {\n    return false;\n  }\n}\n","import React, {useState, useEffect} from 'react'\nimport {Button, Form, FormGroup, Input, Label} from 'reactstrap'\nimport useForm from 'react-hook-form'\nimport isJson from '../helpers/isJson'\nimport axios from 'axios'\nimport config from '../config'\nimport shortkeyHandler from '../helpers/shortkeyHandler'\n\nconst SerialInput = ({connection, preset}) => {\n  const {register, watch, setValue} = useForm()\n  const [error, setError] = useState(undefined)\n\n  useEffect(() => {\n    if (preset) {\n      const {data} = preset\n      setValue('jsonText', JSON.stringify(data, null, 2))\n    }\n  }, [preset])\n\n  const onFormat = () => {\n    setError(undefined)\n    const str = watch('jsonText')\n    if (isJson(str)) {\n      setValue('jsonText', JSON.stringify(JSON.parse(str), null, 2))\n    } else {\n      setError('Json format is invalid')\n    }\n  }\n\n  const onSubmit = async (e) => {\n    if (e) {\n      e.preventDefault()\n    }\n\n    if (!isJson(watch('jsonText'))) {\n      alert('JsonText is invalid')\n      return\n    }\n\n    try {\n      await axios.post(`http://${config.host}:4002/commit`, {\n        data: JSON.parse(watch('jsonText'))\n      })\n    } catch ({response}) {\n      alert(JSON.stringify(response))\n    }\n  }\n\n  shortkeyHandler.addEvent('commit', {metaKey: true, shiftKey: true, key: 'Enter'}, () => onSubmit())\n  shortkeyHandler.addEvent('format', {metaKey: true, shiftKey: true, key: 'l'}, () => onFormat())\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <FormGroup>\n        <Label>\n          Input\n          <span style={{color: 'red'}}> {error}</span>\n        </Label>\n        <Input type=\"textarea\" name=\"jsonText\" disabled={!connection} style={{height: '85vh'}} innerRef={register({required: true})} />\n      </FormGroup>\n      {connection && <div className=\"w-100 text-right\">\n        <Button type=\"button\" color=\"primary\" className=\"m-1\" onClick={onFormat}>Format</Button>\n        {isJson(watch('jsonText')) &&\n        <Button type=\"submit\" color=\"success\" className=\"m-1\">Commit</Button>\n        }\n      </div>}\n    </Form>\n  )\n}\nexport default SerialInput\n","import React, {Fragment, useEffect, useMemo, useState} from 'react'\nimport {Button, FormGroup, Input, Label} from 'reactstrap'\nimport config from '../config'\nimport socketio from 'socket.io-client'\nimport shortkeyHandler from '../helpers/shortkeyHandler'\n\nconst socket = socketio(`http://${config.host}:4002`)\n\nconst useSocketIOTopic = (topic) => {\n  const [response, setResponse] = useState(undefined)\n\n  useEffect(() => {\n    socket.on(topic, (data) => {\n      setResponse(data)\n    })\n  }, [topic])\n\n  return response\n}\n\nconst SerialOutput = ({connection}) => {\n  const [text, setText] = useState(``)\n  const [autoClear, setAutoClear] = useState(false)\n  const res = useSocketIOTopic('listening')\n  useEffect(() => {\n    shortkeyHandler.addEvent('clearText', {metaKey: true, shiftKey: true, key: 'k'}, () => setText(``))\n  }, [])\n  useMemo(() => {\n    if (res) {\n      const {type, data} = res\n      if (type === 'json') {\n        if (autoClear) {\n          return setText(`${JSON.stringify(data, null, 2)}\\r\\n`)\n        }\n\n        setText(`${text}${JSON.stringify(data, null, 2)}\\r\\n`)\n      } else {\n        if (autoClear) {\n          return setText(`${data}\\r\\n`)\n        }\n        setText(`${text}${data}\\r\\n`)\n      }\n    }\n    // eslint-disable-next-line\n  }, [res, autoClear])\n\n  return (\n    <Fragment>\n\n      <FormGroup>\n        <Label>\n          Output\n        </Label>\n        <Input type=\"textarea\" disabled={!connection} value={text} style={{height: '85vh', lineHeight: 1.2}}/>\n      </FormGroup>\n      <div className=\"w-100 text-right\">\n        <Label check>\n          <Input type=\"checkbox\" checked={autoClear} onChange={({target}) => setAutoClear(target.checked)}/>{' '}\n          Auto-Clear\n        </Label>\n        <Button type=\"button\" color=\"primary\" className=\"ml-3\" onClick={() => setText(``)}>Clear</Button>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default SerialOutput\n","import axios from 'axios'\nimport React, {useEffect, useState} from 'react'\nimport {Button, Col, FormGroup, Input, Label} from 'reactstrap'\nimport config from '../config'\n\n\nconst PresetInput = ({onSelect}) => {\n  const [presets, setPreset] = useState([])\n\n  useEffect(() => {\n    axios.get(`http://${config.host}:4002/saves`).then(({data}) => {\n      const nPresets = data.map(({header, data}) => ({header, data}))\n      setPreset([...presets, ...nPresets])\n\n      if (nPresets.length > 0) onSelect(nPresets[0])\n    })\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <FormGroup row>\n      <Label xs={1}>Preset: </Label>\n      <Col xs={7}>\n        <Input type=\"select\" onChange={({target}) => target.value !== -1 && onSelect(presets[target.value])}>\n          {presets.map(({header, data}, index) => <option key={index} value={index}>{header}</option>)}\n        </Input>\n      </Col>\n      <Col xs={2}>\n        <Button type=\"button\" color=\"primary\" className=\"form-control\" onClick={() => null}>Edit</Button>\n      </Col>\n      <Col xs={2}>\n        <Button type=\"button\" color=\"success\" className=\"form-control\" onClick={() => null}>+ Add</Button>\n      </Col>\n    </FormGroup>\n  )\n}\n\nexport default PresetInput\n","import React, {Fragment, useState} from 'react'\nimport {Col, Row} from 'reactstrap'\nimport SelectPortInput from './components/SelectPortInput'\nimport SerialInput from './components/SerialInput'\nimport SerialOutput from './components/SerialOutput'\nimport PresetInput from './components/PresetInput'\nimport './helpers/shortkeyHandler'\nimport pkg from '../package.json'\n\nfunction App() {\n  const [isPortOpen, setIsPortOpen] = useState(false)\n  const [preset, setPreset] = useState()\n  return (\n    <Fragment>\n      <div className=\"ml-3 mr-3\" >\n        <SelectPortInput onStatusChange={(status) => setIsPortOpen(status)}/>\n        <Row>\n          <Col xs=\"12\">\n            {isPortOpen && <PresetInput onSelect={(preset) => setPreset(preset)}/>}\n          </Col>\n        </Row>\n        <Row>\n          <Col xs=\"6\">\n            <SerialInput connection={isPortOpen} preset={preset}/>\n          </Col>\n          <Col xs=\"6\">\n            <SerialOutput connection={isPortOpen}/>\n          </Col>\n        </Row>\n      </div>\n      <span className=\"position-absolute\" style={{bottom: 5, left: 5}}>\n        version: {pkg.version}\n      </span>\n    </Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}